import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from scipy import stats

#Takes a Matrix with Neurons as Rows and Activity Over Time As Columns
#Creates a network - If Two neurons have a signficant correlation we say they are connected, otherwise we say they are not
#This creates an undirected, uneighted graph - In the future we could explore directed and weighted graphs
#From This We Then Calcuate Some Graph Metrics


activity_file_location = "/home/matthew/Documents/MRC Symposium Data/Initial_SHANK3A_PCL_Output/101019_SHANK3A_F5_PCL_Output/Forebrain Binary Matrix.csv"
connection_matrix_save_location = "/home/matthew/Documents/MRC Symposium Data/Initial_SHANK3A_PCL_Output/101019_SHANK3A_F5_PCL_Output/Connection_Matrix.npy"

correlation_sigificance_threahold = 0.05


#Load Activity Matrix From CSV File
def load_activity_matrix(activity_file_location):

    print("loading activity matrix")
    activity_matrix     = np.genfromtxt(activity_file_location,     delimiter=",",  dtype="float")

    print(np.shape(activity_matrix)[0], " Cells")
    print(np.shape(activity_matrix)[1], " Timepoints")

    return activity_matrix


def load_previous_connection_matrix(file_location):
    connection_matrix = np.load(file_location)
    graph = nx.from_numpy_array(connection_matrix)
    return graph


#Create Graph
def create_graph(activity_matrix):

    number_of_neurons = np.shape(activity_matrix)[0]
    connection_matrix = np.zeros((number_of_neurons, number_of_neurons), dtype=np.int)

    for neuron_1 in range(number_of_neurons):
        for neuron_2 in range(neuron_1, number_of_neurons):

            if neuron_1 == neuron_2:
                pass

            else:
                print("From Neuron: ", neuron_1, " To Neuron ", neuron_2)
                correlation_coefficient, p_value = stats.pearsonr(activity_matrix[neuron_1], activity_matrix[neuron_2])

                if p_value < correlation_sigificance_threahold:
                    connection_matrix[neuron_1][neuron_2] = 1
                    connection_matrix[neuron_2][neuron_1] = 1

    np.save(connection_matrix_save_location, connection_matrix)
    plt.imshow(connection_matrix)
    plt.show()

    graph = nx.from_numpy_array(connection_matrix)

    return graph


def calculate_average_degree(graph):
    degrees = []

    degree_iterator = list(graph.degree)
    for pair in degree_iterator:
        degrees.append(pair[1])

    mean_degree = np.mean(degrees)
    return mean_degree

#Calculate Graph Metrics
def calculate_graph_metrics(graph):

    #Average Degree
    mean_degree = calculate_average_degree(graph)
    print("Mean Degree", mean_degree)

    #Clustering Coefficient
    clustering_coefficient = nx.average_clustering(graph)
    print("Clustering Coefficient", clustering_coefficient)

    #Degree Centrality
    degree_centrality = nx.degree_centrality(graph)
    degree_centrality_values = list(degree_centrality.values())
    mean_degree_centrality = np.mean(degree_centrality_values)
    print("Degree Centrality", mean_degree_centrality)


    rich_club_coefficients = nx.rich_club_coefficient(graph)
    rich_club_values = list(rich_club_coefficients.values())
    mean_rich_club_coefficient = np.mean(rich_club_values)
    print("Rich Club Coefficient", mean_rich_club_coefficient)

    #To Calculate The Next Metrics We will Have To Remove Nodes With No Neighbours, This Should Hopefully Just Be A Few
    isolated_nodes = list(nx.isolates(graph))
    print("There are ", len(isolated_nodes), "Isolated Nodes")
    graph.remove_nodes_from(isolated_nodes)

    # Characteristic Path Length
    characteristic_path_length = nx.average_shortest_path_length(graph)
    print("Characteristic Path Length", characteristic_path_length)

    #Small World Coefficient - This may take forever feel free to comment out
    small_world_coefficient = nx.sigma(graph)
    print("Small World coefficient", small_world_coefficient)


activity_matrix = load_activity_matrix(activity_file_location)
correlation_graph = create_graph(activity_matrix)

#correlation_graph = load_previous_connection_matrix(connection_matrix_save_location)

calculate_graph_metrics(correlation_graph)
